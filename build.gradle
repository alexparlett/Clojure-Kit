buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
  }
}

plugins {
  id "org.jetbrains.intellij" version "0.4.19"
}

version = "${version}"
defaultTasks "clean", "artifacts", "test"

allprojects {
  apply plugin: "java"
  apply plugin: "kotlin"

  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
      jvmTarget = javaVersion
      apiVersion = kotlinApiVersion
    }
  }
  sourceSets {
    main {
      java.srcDirs "src", "gen"
      kotlin.srcDirs "src"
      resources.srcDirs "resources"
    }
    test {
      kotlin.srcDirs "tests"
    }
  }
  apply plugin: 'idea'
  idea.module {
    generatedSourceDirs += file('gen')
  }
  apply plugin: "org.jetbrains.intellij"
  intellij {
    version ideaVersion
    type "IC"
    plugins 'copyright', 'java'
    updateSinceUntilBuild false
    downloadSources = false
  }
}

repositories {
  mavenCentral()
  maven { url "http://clojars.org/repo" }
}
dependencies {
  testRuntime "org.clojure:clojure:1.10.1"
  testRuntime "org.clojure:clojurescript:1.10.597"
  compile files("${System.properties['java.home']}/../lib/tools.jar")
}

test {
  useJUnit {}
  include "**/*Test.class"
  scanForTestClasses false
  ignoreFailures true
  beforeTest { descriptor ->
    logger.lifecycle("Running ${descriptor}")
  }
}

task plugin_jar(type: Jar, dependsOn: [rootProject.tasks["assemble"]]) {
  archiveBaseName.set("clojure-kit")
  manifest { from "$rootDir/resources/META-INF/MANIFEST.MF" }
  from(rootProject.sourceSets.main.output)
}

task plugin_zip(type: Zip, dependsOn: [plugin_jar]) {
  archiveBaseName.set("ClojureKit")
  from(tasks["plugin_jar"].outputs) {
    into "/ClojureKit/lib"
  }
}

task artifacts(dependsOn: [plugin_jar, plugin_zip]) {}